name: Release Android APK and Desktop apps

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  android:
    name: Android (Gradle)
    runs-on: ubuntu-latest
    env:
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'
      - uses: android-actions/setup-android@v2
      - name: Ensure Gradle wrapper is executable
        run: chmod +x ./gradlew
      - name: Install Android SDK components
        run: |
          yes | sdkmanager --licenses
          yes | sdkmanager "platform-tools" "platforms;android-36" "build-tools;35.0.0"
      - name: Restore keystore (if provided)
        if: env.ANDROID_KEYSTORE_BASE64 != ''
        run: echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > my-release-key.jks
      - name: Verify keystore fingerprint for TWA
        if: env.ANDROID_KEYSTORE_BASE64 != ''
        run: |
          echo "::group::Keystore fingerprint for Digital Asset Links"
          keytool -list -v -keystore my-release-key.jks -alias "${ANDROID_KEY_ALIAS}" -storepass "${ANDROID_STORE_PASSWORD}" | grep "SHA256:" || true
          echo "::endgroup::"
          echo "ℹ️ Make sure this fingerprint matches the one in your assetlinks.json file"
      - name: Build release APK
        run: |
          echo "::group::Gradle version"; ./gradlew --version; echo "::endgroup::"
          export ANDROID_KEYSTORE_PATH=$GITHUB_WORKSPACE/my-release-key.jks
          export ANDROID_KEY_ALIAS=${ANDROID_KEY_ALIAS}
          export ANDROID_KEY_PASSWORD=${ANDROID_KEY_PASSWORD}
          export ANDROID_STORE_PASSWORD=${ANDROID_STORE_PASSWORD}
          export SKIP_RELEASE_SIGNING=false
          ./gradlew :app:assembleRelease :app:bundleRelease --stacktrace
      - name: Upload Android artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/bundle/release/*.aab

  desktop:
    name: Desktop (Nativefier)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Nativefier
        shell: bash
        run: |
          npm i -g nativefier
          nativefier --version || true
          which nativefier || true
      - name: Build
        shell: bash
        run: |
          set -euxo pipefail
          APP_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}/"
          OUT_DIR="dist-desktop"
          mkdir -p "$OUT_DIR"
          # Select platform/arch explicitly for consistent outputs
          case "${{ runner.os }}" in
            Windows) PLATFORM=windows ;;
            macOS)   PLATFORM=darwin ;;
            Linux)   PLATFORM=linux ;;
          esac
          MACHINE_ARCH=$(uname -m || echo x86_64)
          case "$MACHINE_ARCH" in
            arm64|aarch64) ARCH=arm64 ;;
            *) ARCH=x64 ;;
          esac
          echo "Building Nativefier app for platform=$PLATFORM arch=$ARCH URL=$APP_URL"
          nativefier "$APP_URL" "$OUT_DIR" \
            --name "GlobGram" \
            --internal-urls ".*" \
            --disable-dev-tools \
            --single-instance \
            --platform "$PLATFORM" \
            --arch "$ARCH" \
            --verbose
          echo "Built contents (dist-desktop root):" && ls -la "$OUT_DIR" || true
          echo "Tree (2 levels):" && find "$OUT_DIR" -maxdepth 2 -print | sed 's/^/  /' || true
      - name: Detect Nativefier output dir
        id: detect
        shell: bash
        run: |
          set -euxo pipefail
          OUT_DIR="dist-desktop"
          APP_DIR=$(find "$OUT_DIR" -mindepth 1 -maxdepth 2 -type d \( -name 'GlobGram*' -o -name '*.app' \) | head -n 1 || true)
          if [ -z "$APP_DIR" ]; then
            APP_DIR=$(find "$OUT_DIR" -mindepth 1 -maxdepth 2 -type d | head -n 1 || true)
          fi
          echo "Detected app dir: ${APP_DIR:-<none>}"
          if [ -z "$APP_DIR" ]; then
            echo "No app directory found in $OUT_DIR" >&2
            exit 1
          fi
          # Ensure directory is not empty
          if [ -z "$(find "$APP_DIR" -type f | head -n 1)" ]; then
            echo "App directory $APP_DIR is empty" >&2
            exit 1
          fi
          echo "appdir=$APP_DIR" >> "$GITHUB_OUTPUT"
      - name: Archive desktop app (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path release-desktop | Out-Null
          $AppDir = "${{ steps.detect.outputs.appdir }}"
          if ([string]::IsNullOrWhiteSpace($AppDir)) { throw 'APP_DIR not provided' }
          $AppDirFs = (Resolve-Path $AppDir).Path
          Write-Host "Zipping from app dir: $AppDirFs"
          Get-ChildItem -Recurse $AppDirFs | Write-Host
          $zip = Join-Path -Path (Get-Location).Path -ChildPath 'release-desktop\GlobGram-windows.zip'
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Write-Host "Creating archive at: $zip"
          try {
            Set-Location $AppDirFs
            Compress-Archive -Path * -DestinationPath $zip -Force -CompressionLevel Optimal
            Set-Location -
          } catch {
            Write-Warning "Compress-Archive failed: $($_.Exception.Message)"
          }
          if (-not (Test-Path $zip)) {
            Write-Warning "Zip not found after Compress-Archive; retrying with tar"
            tar -a -c -f $zip -C $AppDirFs .
          }
          if (-not (Test-Path $zip)) { throw "Failed to create zip at $zip" }
          Write-Host "Archive size (bytes):" (Get-Item $zip).Length

      - name: Archive desktop app (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p release-desktop
          APP_DIR='${{ steps.detect.outputs.appdir }}'
          [ -d "$APP_DIR" ] || { echo "App dir not found: $APP_DIR" >&2; exit 1; }
          if command -v ditto >/dev/null 2>&1; then
            ditto -c -k --sequesterRsrc --keepParent "$APP_DIR" release-desktop/GlobGram-macos.zip
          else
            zip -r release-desktop/GlobGram-macos.zip "$APP_DIR"
          fi

      - name: Archive desktop app (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p release-desktop
          APP_DIR='${{ steps.detect.outputs.appdir }}'
          [ -d "$APP_DIR" ] || { echo "App dir not found: $APP_DIR" >&2; exit 1; }
          zip -r release-desktop/GlobGram-linux.zip "$APP_DIR"
      - name: Upload Desktop artifact
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ runner.os }}
          path: release-desktop/*.zip
          if-no-files-found: error

  publish:
    name: Publish Release assets
    runs-on: ubuntu-latest
    needs: [android, desktop]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: true
          path: release-assets
      - name: List gathered assets
        run: |
          echo "Assets in release-assets:" && ls -R release-assets || true
      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/**
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
